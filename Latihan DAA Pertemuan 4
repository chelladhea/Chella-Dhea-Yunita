Loading...
DAA4.ipynb
DAA4.ipynb_
[ ]
#swap function
var1 = 1
var2 = 2
var1,var2 = var2,var1

print(var1,var2)
2 1
[ ]
#swap function
var1 = 1
var2 = 2
var3 = 3
var1,var2,var3 = var3,var1,var2

print(var1,var2,var3)
3 1 2
[ ]
list = [25,21,22,24,23,27,26]
#modifikasi sesuai angka favorit anda
[ ]
#proses penukaran bubble sort
lastElementIndex = len(list)-1
print(0,list)
for idx in range(lastElementIndex):
                if list[idx]>list[idx+1]:
                    list[idx],list[idx+1]=list[idx+1],list[idx]
                print(idx+1,list)
0 [25, 21, 22, 24, 23, 27, 26]
1 [21, 25, 22, 24, 23, 27, 26]
2 [21, 22, 25, 24, 23, 27, 26]
3 [21, 22, 24, 25, 23, 27, 26]
4 [21, 22, 24, 23, 25, 27, 26]
5 [21, 22, 24, 23, 25, 27, 26]
6 [21, 22, 24, 23, 25, 26, 27]
[ ]
list
[21, 22, 24, 23, 25, 26, 27]
[ ]
def BubbleSort(list):
  # Excahnge the elements to arrange in order
        lastElementIndex = len(list)-1
        for passNo in range(lastElementIndex,0,-1):
          for idx in range(passNo):
            if list[idx]>list[idx+1]:
              list[idx],list[idx+1]=list[idx+1],list[idx]
        return list
[ ]
#masukan angka dengan urutan lainnya

list = [25,21,22,24,23,27,26]
[ ]
BubbleSort(list)
[21, 22, 23, 24, 25, 26, 27]
[ ]
list
[21, 22, 23, 24, 25, 26, 27]
[ ]
list = [100,20,60,90,40,30,10]
BubbleSort(list)
[10, 20, 30, 40, 60, 90, 100]
[ ]
def InsertionSort(list):
  for i in range(1, len(list)):
      j = i-1
      next = list[i]
# Compare the current element with next one

      while (list[j] > next) and (j >= 0):
        list[j+1] = list[j]
        j=j-1
      list[j+1] = next
  return list
[ ]
#masukan angka dengan urutan lainnya

list = [35,31,32,34,33,37,36]
[ ]
list
[35, 31, 32, 34, 33, 37, 36]
[ ]
InsertionSort(list)
[31, 32, 33, 34, 35, 36, 37]
[ ]
list
[31, 32, 33, 34, 35, 36, 37]
[ ]
list = [25,26,22,24,27,23,21]
[ ]
InsertionSort(list)
print(list)
[21, 22, 23, 24, 25, 26, 27]
[ ]
list = [89,12,57,16,25,11,75]
[ ]
InsertionSort(list)
print(list)
[11, 12, 16, 25, 57, 75, 89]
[ ]
def SelectionSort(list):
  for fill_slot in range(len(list) - 1, 0, -1):
    max_index = 0
    for location in range(1, fill_slot + 1):
      if list[location] > list[max_index]:
        max_index = location
    list[fill_slot],list[max_index] = list[max_index],list[fill_slot]
  return list
[ ]
list = [70,15,25,19,34,44]
SelectionSort(list)
[15, 19, 25, 34, 44, 70]
[ ]
list
[15, 19, 25, 34, 44, 70]
[ ]
list = [89,12,57,16,25]
[ ]
SelectionSort(list)
[12, 16, 25, 57, 89]
[ ]
list
[12, 16, 25, 57, 89]
[ ]
def LinearSearch(list, item):
    index = 0
    found = False

# Match the value with each data element
    while index < len(list) and found is False:
      if list[index] == item:
        found = True
      else:
        index = index + 1
    return found
[ ]
list = [12, 33, 11, 99, 22, 55, 90]
print(LinearSearch(list, 12))
print(LinearSearch(list, 91))
True
False
[ ]
deret = ['y', 'u', 'i', 'w', 'o', 'a', 'q', 'u', 'j', 'p']
print(LinearSearch(deret, 'a'))
True
[ ]
def BinarySearch(list, item):
    first = 0
    last = len(list)-1
    found = False

    while first<=last and not found:
        midpoint = (first + last)//2
        if list[midpoint] == item:
            found = True
        else:
            if item < list[midpoint]:
                last = midpoint-1
            else:
                first = midpoint+1
    return found
[ ]
list = [12, 33, 11, 99, 22, 55, 90]
sorted_list = BubbleSort(list)
print(BinarySearch(list, 12))
print(BinarySearch(list, 91))
True
False
[ ]
deret = ['y','u','i','w','o','a','q','u','j','p']
sorted_list = BubbleSort(deret)
print(BinarySearch(deret, 'a'))
True
[ ]
def IntPolsearch(list,x ):
    idx0 = 0
    idxn = (len(list) - 1)
    found = False
    while idx0 <= idxn and x >= list[idx0] and x <= list[idxn]:

# Find the mid point
        mid = idx0 +int(((float(idxn - idx0)/( list[idxn] - list[idx0])) * ( x - list[idx0])))

# Compare the value at mid point with search value 
        if list[mid] == x:
            found = True
            return found

        if list[mid] < x:
            idx0 = mid + 1
    return found
[ ]
deret = ['y','u','i','w','0','a','q','u','j','p']
print(IntPolsearch(deret, 'u')) 5
False
